import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';
import { motion } from 'framer-motion';
import { 
  CreditCard, Search, Plus, Calendar, MapPin, User, 
  DollarSign, X, Loader2 
} from 'lucide-react';
import Navbar from '../components/Navbar';
import Sidebar from '../components/Sidebar';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';

interface Student {
  id: number;
  name: string;
  phone: string;
  fatherName?: string | null;
  branchId: number;
  branchName?: string;
  membershipEnd: string;
  status: 'active' | 'expired';
}

interface AdvancePaymentRecord {
  id: number;
  studentId: number;
  studentName: string;
  branchName: string;
  membershipExpiry: string;
  amount: number;
  paymentDate: string;
  createdAt: string;
}

interface Branch {
  id: number;
  name: string;
}

const AdvancedPayment: React.FC = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  
  // UI State
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  
  // Form State
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
  const [amount, setAmount] = useState('');
  const [paymentDate, setPaymentDate] = useState(new Date().toISOString().split('T')[0]);
  
  // Mock data for advance payments (replace with actual API call)
  const [advancePayments, setAdvancePayments] = useState<AdvancePaymentRecord[]>([]);

  const handleBarcodeClick = () => {
    toast.info('Barcode scanning functionality');
  };

  // Fetch all students
  const { data: studentsData, isLoading: studentsLoading } = useQuery({
    queryKey: ['allStudents'],
    queryFn: async () => {
      const response = await api.getStudents(undefined, undefined, undefined);
      return response;
    },
  });

  const students = studentsData?.students || [];

  // Filter students based on search
  const filteredStudents = students.filter((student: Student) => 
    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    student.phone.includes(searchTerm)
  );

  // Add advance payment mutation
  const addPaymentMutation = useMutation({
    mutationFn: async (data: { studentId: number; amount: number; paymentDate: string }) => {
      // Save as transaction with type 'advance'
      await api.addTransaction({
        studentId: data.studentId,
        amount: data.amount,
        paymentMethod: 'cash',
        description: `Advance Payment - Date: ${data.paymentDate}`,
        type: 'advance'
      });
    },
    onSuccess: () => {
      toast.success('Advance payment recorded successfully');
      queryClient.invalidateQueries({ queryKey: ['advancePayments'] });
      closeModal();
    },
    onError: () => {
      toast.error('Failed to record advance payment');
    },
  });

  const handleSubmit = () => {
    if (!selectedStudent) {
      toast.error('Please select a student');
      return;
    }
    
    const amountValue = parseFloat(amount);
    if (isNaN(amountValue) || amountValue <= 0) {
      toast.error('Please enter a valid amount');
      return;
    }

    if (!paymentDate) {
      toast.error('Please select a payment date');
      return;
    }

    addPaymentMutation.mutate({
      studentId: selectedStudent.id,
      amount: amountValue,
      paymentDate,
    });
  };

  const openModal = () => {
    setIsModalOpen(true);
    setSearchTerm('');
    setSelectedStudent(null);
    setAmount('');
    setPaymentDate(new Date().toISOString().split('T')[0]);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSearchTerm('');
    setSelectedStudent(null);
    setAmount('');
    setPaymentDate(new Date().toISOString().split('T')[0]);
  };

  const selectStudent = (student: Student) => {
    setSelectedStudent(student);
    setSearchTerm('');
  };

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar isCollapsed={isCollapsed} setIsCollapsed={setIsCollapsed} onBarcodeClick={handleBarcodeClick} />
      <div className="flex-1 flex flex-col min-h-screen overflow-hidden">
        <Navbar />
        <div className="flex-1 overflow-auto p-6">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-3xl shadow-2xl p-8 mb-6"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="bg-white/20 backdrop-blur-sm p-4 rounded-2xl">
                  <CreditCard size={40} className="text-white" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold text-white mb-1">Advanced Payment</h1>
                  <p className="text-indigo-100">Record advance payments from students</p>
                </div>
              </div>
              <button
                onClick={openModal}
                className="bg-white text-indigo-600 px-6 py-3 rounded-xl font-semibold flex items-center gap-2 hover:bg-indigo-50 transition-all shadow-lg hover:shadow-xl"
              >
                <Plus size={20} />
                Add Advanced Payment
              </button>
            </div>
          </motion.div>

          {/* Filters */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-white rounded-2xl shadow-lg p-6 mb-6"
          >
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Search */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <input
                  type="text"
                  placeholder="Search by name, phone, father's name..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>

              {/* Branch Filter */}
              <div className="relative">
                <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <select
                  value={selectedBranchId || ''}
                  onChange={(e) => setSelectedBranchId(e.target.value ? parseInt(e.target.value) : null)}
                  className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent appearance-none"
                >
                  <option value="">All Branches</option>
                  {branches.map((branch) => (
                    <option key={branch.id} value={branch.id}>{branch.name}</option>
                  ))}
                </select>
              </div>

              {/* Month Filter */}
              <div className="relative">
                <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <input
                  type="month"
                  value={selectedMonth}
                  onChange={(e) => setSelectedMonth(e.target.value)}
                  className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>

              {/* View Mode Toggle */}
              <div className="flex gap-2">
                <button
                  onClick={() => setViewMode('card')}
                  className={`flex-1 flex items-center justify-center gap-2 py-2.5 rounded-xl transition-all ${
                    viewMode === 'card'
                      ? 'bg-indigo-600 text-white shadow-lg'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  <Grid size={18} />
                  Cards
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`flex-1 flex items-center justify-center gap-2 py-2.5 rounded-xl transition-all ${
                    viewMode === 'list'
                      ? 'bg-indigo-600 text-white shadow-lg'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  <List size={18} />
                  List
                </button>
              </div>
            </div>
          </motion.div>

          {/* Loading State */}
          {isLoading && (
            <div className="flex items-center justify-center py-20">
              <Loader2 className="animate-spin text-indigo-600" size={48} />
            </div>
          )}

          {/* Students Display */}
          {!isLoading && (
            <>
              {viewMode === 'card' ? (
                /* Card View */
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredStudents.map((student: Student) => (
                    <motion.div
                      key={student.id}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      className="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden"
                    >
                      <div className="bg-gradient-to-r from-indigo-500 to-purple-500 p-4">
                        <div className="flex items-center gap-3">
                          <div className="bg-white/20 backdrop-blur-sm p-3 rounded-xl">
                            <User size={24} className="text-white" />
                          </div>
                          <div className="flex-1">
                            <h3 className="text-lg font-bold text-white truncate">{student.name}</h3>
                            <p className="text-indigo-100 text-sm">{student.status === 'active' ? 'Active' : 'Expired'}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="p-5 space-y-3">
                        <div className="flex items-center gap-2 text-gray-600">
                          <Phone size={16} />
                          <span className="text-sm">{student.phone}</span>
                        </div>
                        
                        <div className="flex items-center gap-2 text-gray-600">
                          <User size={16} />
                          <span className="text-sm">Father: {student.fatherName}</span>
                        </div>
                        
                        <div className="flex items-center gap-2 text-gray-600">
                          <MapPin size={16} />
                          <span className="text-sm">{student.branchName}</span>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <Calendar size={16} className="text-gray-600" />
                          <span className="text-sm text-gray-600">
                            Expires: {new Date(student.membershipEnd).toLocaleDateString()}
                          </span>
                          {isExpiringSoon(student.membershipEnd) && (
                            <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full flex items-center gap-1">
                              <AlertTriangle size={12} />
                              Expiring Soon
                            </span>
                          )}
                        </div>
                        
                        <div className="pt-3 border-t border-gray-200">
                          <div className="flex items-center justify-between mb-3">
                            <span className="text-sm font-medium text-gray-600">Due Amount:</span>
                            <span className={`text-lg font-bold ${getBalance(student) <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                              ₹{Math.abs(getBalance(student)).toFixed(2)}
                            </span>
                          </div>
                          
                          <button
                            onClick={() => openPaymentModal(student)}
                            className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-2.5 rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all shadow-lg hover:shadow-xl font-medium"
                          >
                            Record Payment
                          </button>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              ) : (
                /* List View */
                <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white">
                        <tr>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Name</th>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Phone</th>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Father's Name</th>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Branch</th>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Expiry Date</th>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Balance</th>
                          <th className="px-6 py-4 text-left text-sm font-semibold">Action</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {filteredStudents.map((student: Student) => (
                          <tr key={student.id} className="hover:bg-gray-50 transition-colors">
                            <td className="px-6 py-4">
                              <div className="font-medium text-gray-900">{student.name}</div>
                              <div className="text-sm text-gray-500">{student.status === 'active' ? 'Active' : 'Expired'}</div>
                            </td>
                            <td className="px-6 py-4 text-gray-600">{student.phone}</td>
                            <td className="px-6 py-4 text-gray-600">{student.fatherName}</td>
                            <td className="px-6 py-4 text-gray-600">{student.branchName}</td>
                            <td className="px-6 py-4">
                              <div className="flex items-center gap-2">
                                <span className="text-gray-600 text-sm">
                                  {new Date(student.membershipEnd).toLocaleDateString()}
                                </span>
                                {isExpiringSoon(student.membershipEnd) && (
                                  <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-0.5 rounded-full flex items-center gap-1">
                                    <AlertTriangle size={10} />
                                    Soon
                                  </span>
                                )}
                              </div>
                            </td>
                            <td className="px-6 py-4">
                              <span className={`font-semibold ${getBalance(student) <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                                ₹{Math.abs(getBalance(student)).toFixed(2)}
                              </span>
                            </td>
                            <td className="px-6 py-4">
                              <button
                                onClick={() => openPaymentModal(student)}
                                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors text-sm font-medium"
                              >
                                Record Payment
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}

              {filteredStudents.length === 0 && (
                <div className="text-center py-20">
                  <CreditCard className="mx-auto text-gray-400 mb-4" size={64} />
                  <p className="text-gray-500 text-lg">No students found</p>
                </div>
              )}
            </>
          )}
        </div>
      </div>

      {/* Payment Modal */}
      {isPaymentModalOpen && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-2xl shadow-2xl max-w-md w-full overflow-hidden"
          >
            <div className="bg-gradient-to-r from-indigo-600 to-purple-600 p-6">
              <div className="flex items-center justify-between">
                <h3 className="text-xl font-bold text-white">Record Payment</h3>
                <button
                  onClick={() => {
                    setIsPaymentModalOpen(false);
                    setPaymentAmount('');
                    setPaymentNotes('');
                  }}
                  className="text-white hover:bg-white/20 rounded-lg p-2 transition-colors"
                >
                  <X size={24} />
                </button>
              </div>
            </div>

            <div className="p-6 space-y-4">
              <div>
                <p className="text-sm text-gray-600 mb-1">Student Name</p>
                <p className="text-lg font-semibold text-gray-900">{selectedStudent.name}</p>
              </div>

              <div>
                <p className="text-sm text-gray-600 mb-1">Due Amount</p>
                <p className={`text-lg font-bold ${getBalance(selectedStudent) <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  ₹{Math.abs(getBalance(selectedStudent)).toFixed(2)}
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Payment Amount *
                </label>
                <div className="relative">
                  <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type="number"
                    value={paymentAmount}
                    onChange={(e) => setPaymentAmount(e.target.value)}
                    placeholder="Enter amount"
                    className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Payment Notes (Optional)
                </label>
                <textarea
                  value={paymentNotes}
                  onChange={(e) => setPaymentNotes(e.target.value)}
                  placeholder="Add any notes about this payment..."
                  rows={3}
                  className="w-full px-4 py-2.5 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
                />
              </div>

              <div className="flex gap-3 pt-4">
                <button
                  onClick={() => {
                    setIsPaymentModalOpen(false);
                    setPaymentAmount('');
                    setPaymentNotes('');
                  }}
                  className="flex-1 px-4 py-2.5 border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors font-medium"
                >
                  Cancel
                </button>
                <button
                  onClick={handlePayment}
                  disabled={paymentMutation.isPending}
                  className="flex-1 px-4 py-2.5 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all shadow-lg hover:shadow-xl font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                >
                  {paymentMutation.isPending ? (
                    <>
                      <Loader2 size={18} className="animate-spin" />
                      Processing...
                    </>
                  ) : (
                    'Record Payment'
                  )}
                </button>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default AdvancedPayment;
